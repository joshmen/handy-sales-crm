name: Development Pipeline

on:
  push:
    branches:
      - development
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - development
      - develop

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: An√°lisis de c√≥digo y tests
  quality-check:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run TypeScript check
        run: npx tsc --noEmit
        continue-on-error: true

      - name: Run tests
        run: npm test -- --passWithNoTests
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.DEV_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: development

  # Job 2: An√°lisis de seguridad
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  # Job 3: Deploy to Vercel Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality-check]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/development' || github.ref == 'refs/heads/develop')
    
    environment:
      name: development
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=development --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.DEV_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: development
          DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.DEV_NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.DEV_NEXTAUTH_URL }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Deployed to: $url"

      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üöÄ Development deployment ready!\n\nPreview: ${{ steps.deploy.outputs.url }}'
            })

  # Job 4: Preview deployments para PRs
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy Preview to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `### üîç Preview Deployment
            
            **URL:** ${{ steps.deploy.outputs.url }}
            **Branch:** \`${{ github.head_ref }}\`
            **Commit:** \`${{ github.sha.substring(0, 7) }}\`
            
            ---
            _This preview will be automatically deleted when the PR is merged or closed._`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            })

  # Job 5: Notificaciones
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-development]
    if: always() && github.event_name == 'push'
    
    steps:
      - name: Notify Slack on Success
        if: ${{ needs.deploy-development.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '‚úÖ Development deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: Notify Slack on Failure
        if: ${{ needs.deploy-development.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Development deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
