name: Production Pipeline

on:
  push:
    branches:
      - main
      - master
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deploy_reason:
        description: 'Reason for manual deployment'
        required: true
        type: string

env:
  NODE_VERSION: '20.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Job 1: Tests completos y build
  test-and-build:
    name: Test & Build Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Para an√°lisis completo del c√≥digo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --production=false

      - name: Run ESLint (strict mode)
        run: npm run lint

      - name: Run TypeScript check
        run: npx tsc --noEmit

      - name: Run all tests
        run: npm test -- --coverage --passWithNoTests
        env:
          CI: true

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: production
        continue-on-error: true

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            public/
            package.json
            package-lock.json
          retention-days: 1

  # Job 2: An√°lisis de seguridad estricto
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Run security audit (strict)
        run: npm audit --audit-level=high

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'handy-crm'
          path: '.'
          format: 'HTML'
        continue-on-error: true

      - name: Check for secrets and credentials
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  # Job 3: Performance testing
  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [test-and-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Analyze bundle size
        run: |
          npx next-bundle-analyzer
        continue-on-error: true

  # Job 4: Deploy to Production (con aprobaci√≥n manual)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build, security-audit]
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: production
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.PROD_NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.PROD_NEXTAUTH_URL }}

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          url=$(vercel deploy --prod --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Production URL: $url"

      - name: Verify deployment
        run: |
          sleep 30
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.url }})
          if [ $response -eq 200 ]; then
            echo "‚úÖ Deployment verified successfully"
          else
            echo "‚ùå Deployment verification failed with status: $response"
            exit 1
          fi

  # Job 5: Post-deployment tasks
  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            ## üöÄ Production Deployment
            
            **Deployed at:** ${{ needs.deploy-production.outputs.url }}
            **Commit:** ${{ github.sha }}
            **Deployed by:** ${{ github.actor }}
            **Time:** ${{ github.event.head_commit.timestamp }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
        continue-on-error: true

      - name: Update deployment status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: '${{ needs.deploy-production.outputs.url }}',
              description: 'Production deployment successful'
            });
        continue-on-error: true

      - name: Purge CDN Cache
        run: |
          # Add your CDN cache purging logic here
          echo "Purging CDN cache..."
        continue-on-error: true

  # Job 6: Rollback (manual trigger)
  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    needs: [deploy-production]
    
    environment:
      name: production-rollback
    
    steps:
      - name: Checkout previous commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Rollback to previous deployment
        run: |
          echo "Rolling back to previous deployment..."
          vercel rollback --token=${{ secrets.VERCEL_TOKEN }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "‚ö†Ô∏è Production rollback initiated by ${{ github.actor }}"
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 7: Notificaciones finales
  notify-final:
    name: Final Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack - Success
        if: ${{ needs.deploy-production.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ‚úÖ *Production Deployment Successful!*
            
            URL: ${{ needs.deploy-production.outputs.url }}
            Deployed by: ${{ github.actor }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: Notify Slack - Failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå *Production Deployment Failed!*
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}
            
            Please check the workflow logs for details.
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: Send email notification
        if: ${{ needs.deploy-production.result == 'success' }}
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Production Deployment - ${{ needs.deploy-production.result }}
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: GitHub Actions
          body: |
            Production deployment completed with status: ${{ needs.deploy-production.result }}
            
            URL: ${{ needs.deploy-production.outputs.url }}
            Time: ${{ github.event.head_commit.timestamp }}
        continue-on-error: true
